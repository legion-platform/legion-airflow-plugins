import java.text.SimpleDateFormat

class Globals {
    static String rootCommit = null
    static String buildVersion = null
    static String dockerLabels = null
    static String dockerCacheArg = null
}

pipeline {
    agent { label 'ec2builder'}

    options{
            buildDiscarder(logRotator(numToKeepStr: '35', artifactNumToKeepStr: '35'))
    }
    environment {
            /// Input parameters
            //Enable docker cache parameter
            param_enable_docker_cache = "${params.EnableDockerCache}"
            //Build major version release and optionally push it to public repositories
            param_stable_release = "${params.StableRelease}"
            //Release version to tag all artifacts to
            param_release_version = "${params.ReleaseVersion}"
            //Git Branch to build package from
            param_git_branch = "${params.GitBranch}"
            //Legion cicd repo url (for pipeline methods import)
            param_legion_cicd_repo = "${params.LegionCicdRepo}"
            //Legion cicd repo version tag (tag or branch name)
            param_legion_cicd_version_tag = "${params.LegionCicdVersionTag}"
            //Push release git tag
            param_push_git_tag = "${params.PushGitTag}"
            //Rewrite git tag i exists
            param_force_tag_push = "${params.ForceTagPush}"
            //Push release to master bransh
            param_update_master = "${params.UpdateMaster}"
            //Upload legion python package to pypi
            param_upload_legion_package_pypi= "${params.UploadPyPi}"
            //Set next releases version explicitly
            param_next_version = "${params.NextVersion}"
            // Update version string
            param_update_version_string = "${params.UpdateVersionString}"
            // Release version to be used as docker cache source
            param_docker_cache_source = "${params.DockerCacheSource}"
            //Artifacts storage parameters
            param_helm_repo_git_url = "${params.HelmRepoGitUrl}"
            param_helm_repo_git_branch = "${params.HelmRepoGitBranch}"
            param_helm_repository = "${params.HelmRepository}"
            param_pypi_repository = "${params.PyPiRepo}"
            param_local_pypi_distribution_target_name = "${params.LocalPyPiDistributionTargetName}"
            param_test_pypi_distribution_target_name = "${params.testPyPiDistributionTargetName}"
            param_public_pypi_distribution_target_name = "${params.PublicPyPiDistributionTargetName}"
            param_pypi_distribution_target_name = "${params.PyPiDistributionTargetName}"
            param_jenkins_plugins_repository_store = "${params.JenkinsPluginsRepositoryStore}"
            param_jenkins_plugins_repository = "${params.JenkinsPluginsRepository}"
            param_docker_registry = "${params.DockerRegistry}"
            param_docker_hub_registry = "${params.DockerHubRegistry}"
            param_git_deploy_key = "${params.GitDeployKey}"
            param_legion_cicd_gitlab_key = "${params.legionCicdGitlabKey}"
            ///Job parameters
            updateVersionScript = "scripts/update_version_id"
            sharedLibPath = "legion-cicd/pipelines/legionPipeline.groovy"
            pathToCharts= "${WORKSPACE}/helms"

            // PyPi
            param_pypi_public_url = "${params.PyPiPublicUrl}"
            param_pypi_public_creds = "pypi_public_cred"
            param_pypi_private_url = "${params.PyPiPrivateUrl}"
            param_pypi_private_creds = "nexus-local-repository"
            param_pypi_publishing_enabled = "${PyPiPublishingEnabled}"

    }

    stages {
        stage('Checkout and set build vars') {
            steps {
                cleanWs()
                checkout scm
                script {
                    sh 'echo RunningOn: $(curl http://checkip.amazonaws.com/)'

                    // import Legion components
                    sshagent(["${env.legionCicdGitlabKey}"]) {
                        sh"""#!/bin/bash -ex
                        #TODO get repo url from passed parameters
                        mkdir -p \$(getent passwd \$(whoami) | cut -d: -f6)/.ssh && ssh-keyscan git.epam.com >> \$(getent passwd \$(whoami) | cut -d: -f6)/.ssh/known_hosts
                        if [ ! -d "legion-cicd" ]; then
                            git clone ${env.param_legion_cicd_repo} legion-cicd
                        fi
                        cd legion-cicd && git checkout ${env.param_legion_cicd_version_tag}
                        """
                    }
                    print ("Load legion pipeline common library")
                    legion = load "${env.sharedLibPath}"

                    print("Check code for security issues")
                    sh "bash scripts/install-git-secrets-hook.sh install_hooks && git secrets --scan -r"

                    verFiles = [
                            "legion/airflow/__version__.py",
                    ]
                    legion.setBuildMeta(verFiles)
                }
            }
        }

        // Set Git Tag in case of stable release
        stage('Set GIT release Tag'){
            steps {
                script {
                    print (env.param_stable_release)
                    if (env.param_stable_release.toBoolean() && env.param_push_git_tag.toBoolean()){
                        legion.setGitReleaseTag("${env.param_git_deploy_key}")
                    }
                    else {
                        print("Skipping release git tag push")
                    }
                }
            }
        }

        stage("Docker login") {
            steps {
                withCredentials([[
                 $class: 'UsernamePasswordMultiBinding',
                 credentialsId: 'nexus-local-repository',
                 usernameVariable: 'USERNAME',
                 passwordVariable: 'PASSWORD']]) {
                    sh "docker login -u ${USERNAME} -p ${PASSWORD} ${env.param_docker_registry}"
                }
                script {
                    if (env.param_stable_release.toBoolean()) {
                        withCredentials([[
                        $class: 'UsernamePasswordMultiBinding',
                        credentialsId: 'dockerhub',
                        usernameVariable: 'USERNAME',
                        passwordVariable: 'PASSWORD']]) {
                            sh "docker login -u ${USERNAME} -p ${PASSWORD}"
                        }
                    }
                }
            }
        }
        stage("Build the pipeline Docker image") {
            steps {
                script {
                    legion.buildLegionImage('legion-airflow-plugin-pipeline', '.', 'containers/pipeline-agent/Dockerfile')
                    legion.uploadDockerImage('legion-airflow-plugin-pipeline')
                }
            }
        }
//         stage("Run tests") {
//             parallel {
//                 stage("Run python unittests") {
//                     steps {
//                         script {
//                             docker.image("legion/legion-airflow-plugin-pipeline:${Globals.buildVersion}").inside("-v /var/run/docker.sock:/var/run/docker.sock -u root --net host") {
//                                 sh """
//                                     cd /opt/legion
//                                     make unittests || true
//                                 """
//                                 sh 'cp -r /opt/legion/target/legion-cover.xml /opt/legion/target/nosetests.xml /opt/legion/target/cover ./'
//                                 junit 'nosetests.xml'
//
//                                 stash name: "python-cover", includes: "legion-cover.xml"
//
//                                 publishHTML (target: [
//                                         allowMissing: false,
//                                         alwaysLinkToLastBuild: false,
//                                         keepAll: true,
//                                         reportDir: 'cover',
//                                         reportFiles: 'index.html',
//                                         reportName: "Test Coverage Report"
//                                 ])
//                                 sh 'rm -rf *-cover.xml nosetests.xml cover'
//                             }
//                         }
//                     }
//                 }
//                 stage('Run Python code analyzers') {
//                     steps {
//                         script {
//                             docker.image("legion/legion-airflow-plugin-pipeline:${Globals.buildVersion}").inside() {
//                                 def statusCode = sh script:'make lint', returnStatus:true
//
//                                 if (statusCode != 0) {
//                                     currentBuild.result = 'UNSTABLE'
//                                 }
//
//                                 archiveArtifacts 'target/pylint/legion.log'
//                                 archiveArtifacts 'target/pydocstyle/legion.log'
//                                 step([
//                                         $class                     : 'WarningsPublisher',
//                                         parserConfigurations       : [[
//                                                                               parserName: 'PYLint',
//                                                                               pattern   : 'target/pylint/legion.log'
//                                                                       ]],
//                                         unstableTotalAll           : '0',
//                                         usePreviousBuildAsReference: true
//                                 ])
//                             }
//                         }
//                     }
//                 }
//             }
//         }

        stage('Upload artifacts'){
            parallel {
//                 stage("Upload coverage files") {
//                     steps {
//                         script {
//                             unstash 'feedback-cover'
//                             unstash 'operator-cover'
//                             unstash 'python-cover'
//
//                             cobertura coberturaReportFile: '*-cover.xml'
//                         }
//                     }
//                 }
                stage("Upload PyPi Legion packages") {
                    steps {
                        script {
                            legion.publishPythonPackage("./", env.param_pypi_private_creds, env.param_pypi_private_url, env.param_pypi_publishing_enabled, env.param_pypi_public_creds, env.param_pypi_public_url)
                        }
                    }
                }
            }
        }

        stage("Update Legion version string") {
            steps {
                script {
                    if (env.param_stable_release.toBoolean() && env.param_update_version_string.toBoolean()) {
                        legion.updateVersionString(env.versionFile)
                    }
                    else {
                        print("Skipping version string update")
                    }
                }
            }
        }

        stage('Update Master branch'){
            steps {
                script {
                    if (env.param_update_master.toBoolean()){
                        legion.updateMasterBranch()
                    }
                    else {
                        print("Skipping Master branch update")
                    }
                }
            }
        }
    }

    post {
        always {
            deleteDir()
        }
    }
}
